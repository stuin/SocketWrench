plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

repositories {
	maven {
		url "https://github.com/stuin/SocketWrench/raw/maven2"
	}

	//Industrial Revolution
	maven {
		name = "Cafeteria Development"
		url = 'https://maven.cafeteria.dev/releases'
	}
	maven {
		name = "BuildCraft"
		url = "https://mod-buildcraft.com/maven"
		content {
			includeGroup "alexiil.mc.lib"
		}
	}
	maven {
		url = "https://jitpack.io"
		content {
			includeGroup "com.github.Technici4n"
			includeGroup "com.github.Draylar"
			includeGroup "com.github.Draylar.omega-config"
			includeGroup "com.github.emilyploszaj"
			includeGroup "com.github.KubeJS-Mods"
			includeGroup "com.github.GabrielOlvH"
			/* For Magna */
			includeGroup "com.github.Draylar"
			includeGroup "com.github.Draylar.omega-config"
			// for Immersive Portals
			includeGroup "com.github.qouteall.ImmersivePortalsMod"
		}
	}
	// for ARRP
	maven {
		url = "https://storage.googleapis.com/devan-maven/"
		content {
			includeGroup "net.devtech"
		}
	}
	// for Patchouli
	maven {
		url 'https://maven.blamejared.com'
	}
	// for WTHIT
	maven {
		url 'https://bai.jfrog.io/artifactory/maven'
	}
	// for AE2
	maven {
		name "Modmaven"
		url "https://modmaven.dev"
		content {
			includeGroup "appeng"
		}
	}
	maven {
		url "https://maven.shedaniel.me"
		content {
			includeGroup "me.shedaniel.cloth.api"
			includeGroup "me.sargunvohra.mcmods"
			includeGroup "me.shedaniel.cloth"
			includeGroup "me.shedaniel"
			includeGroup "dev.architectury"
		}
	}
	maven {
		url "https://maven.saps.dev/minecraft"
		content {
			includeGroup "dev.latvian.mods"
			includeGroup "dev.ftb.mods"
		}
	}
	// for reach entity attributes, required by Magna
	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release/"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	// for PlayerAbilityLib
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
		content {
			includeGroup 'io.github.ladysnake'
			includeGroupByRegex 'io\\.github\\.onyxstudios.*'
		}
	}
	mavenLocal()
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// SocketWrench
	modImplementation "com.stuintech:SocketWrench:${project.socketwrench_version}"
	include "com.stuintech:SocketWrench:${project.socketwrench_version}"

	// Immersive Portals
	modImplementation ("com.github.qouteall.ImmersivePortalsMod:imm_ptl_core:${project.imm_portals_version}"){
		exclude(group: "net.fabricmc.fabric-api")
		transitive(false)
	}

	// Miscellaneous Utility Library from qouteall
	modImplementation ("com.github.qouteall.ImmersivePortalsMod:q_misc_util:${project.imm_portals_version}"){
		exclude(group: "net.fabricmc.fabric-api")
		transitive(false)
	}

	// Applied Energistics 2
	/*modImplementation("appeng:appliedenergistics2-fabric:${project.appeng_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}*/

	// Reborn Core
	modImplementation("RebornCore:RebornCore-1.18:${project.reborncore_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Industrial Revolution
	modImplementation("me.steven:Industrial-Revolution:${project.indrev_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Modern Industrialization
	/*modImplementation("aztech:Modern-Industrialization:${project.modernin_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}*/
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.release = 17
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}
	repositories {
	}
}
